name: "Build and release"

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  get-tag:
    runs-on: ubuntu-22.04
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag
        id: pkg-version
        shell: bash
        run: |
          echo PKG_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' backend/Cargo.toml) >> $GITHUB_OUTPUT

      - name: Set tag
        shell: bash
        run: |
          git tag v${{ steps.get-tag.outputs.PKG_VERSION }} && git push --tags

  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: Cache build assets
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
          frontend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Download trunk
      uses: jetli/trunk-action@v0.1.0
      with:
        version: 'latest'

    - name: Build target amd64
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target x86_64-unknown-linux-musl --manifest-path backend/Cargo.toml

    - name: Copy binary
      run: |
        mkdir bin
        cp target/x86_64-unknown-linux-musl/release/mailcrab-backend bin/amd64
      working-directory: ./backend

    - name: Cargo clean
      run: cargo clean
      working-directory: ./backend

    - name: Build target arm64
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --target aarch64-unknown-linux-musl --manifest-path backend/Cargo.toml

    - name: Copy binary
      run: |
        cp target/aarch64-unknown-linux-musl/release/mailcrab-backend bin/arm64
      working-directory: ./backend

    - name: Build frontend
      run: trunk build
      working-directory: ./frontend

    - name: Build docker image
      run: docker buildx build --push --platform=linux/amd64,linux/arm64 . -t marlonb/mailcrab:latest -t marlonb/mailcrab:${{ needs.get-tag.outputs.pkg-version }}
